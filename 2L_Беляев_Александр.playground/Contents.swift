import UIKit

//Задание 1. Написать функцию, которая определяет, четное число или нет.

func evenNotEven (_ сheckedNumber: Int) {
    if сheckedNumber % 2 == 0 {
        print ("\nЧисло \(сheckedNumber) - четное.")
    } else {
        print ("\nЧисло \(сheckedNumber) - нечетное.")
    }
}

evenNotEven(20)

print("\n========================================================================================\n")

//Задание 2. Написать функцию, которая определяет, делится ли число без остатка на 3.

func divisionByThree (_ сheckedNumber: Int) {
    if сheckedNumber % 3 == 0 {
        print ("Число \(сheckedNumber) - делится на 3 без остатка.")
    } else {
        print ("Число \(сheckedNumber) - не делится на 3 без остатка.")
    }
}

divisionByThree(33)

print("\n========================================================================================\n")

//Задание 3. Создать возрастающий массив из 100 чисел.

let elementsCount:Int = 100

var numbers = [Int] (1...elementsCount)
    print ("Исходный массив: \(numbers)")

print("\n========================================================================================\n")

// Задание 4. Удалить из этого массива все четные числа и все числа, которые не делятся на 3.

var filteredNumbers = numbers.filter({$0 % 2 != 0})
filteredNumbers = filteredNumbers.filter({$0 % 3 == 0})
print ("Итоговый массив: \(filteredNumbers)")

print("\n========================================================================================\n")

// Задание 5. * Написать функцию, которая добавляет в массив новое число Фибоначчи, и добавить при помощи нее 100 элементов.

func arrayFibonacci (_ elementsCount: Int) {

    var arrayFibonacci: [UInt64] = [0, 1]
    print ("Исходный массив: \(arrayFibonacci)\n")
    var element: Int = 0
    
    while element < elementsCount {
        let newElement:UInt64 = arrayFibonacci[element] + arrayFibonacci[element + 1]
        arrayFibonacci.append(newElement)
        element += 1
    }
    print ("Добавлено чисел Фибоначчи в массив: \(elementsCount)\n\nИтоговый массив: \(arrayFibonacci)")
}

arrayFibonacci(92) //При использовании типа данных UInt64 максимальный размер числа ограничен 64-мя битами (от 0 до 18446744073709551615), поэтому мы сможем добавить в исходный массив 92 числа Фибоначчи, максимальное из них будет: 12200160415121876738. Можно использовать тип данных Float80, но в таком случае числа будут выводиться с ".0" на конце, который я не понял как можно убрать. В случае, если в исходный массив нужно добавить 100 чисел Фиббоначи, при использовании типа Float80 последним элементом будет число 5.731478440138170841e+20.

print("\n========================================================================================\n")
